<?php
namespace yii\easyii\modules\customs\api;

use Yii;
use yii\data\ActiveDataProvider;
use yii\easyii\models\Tag;
use yii\easyii\widgets\Fancybox;
use yii\widgets\LinkPager;

use yii\easyii\modules\customs\models\Customs as CustomsModel;

/**
 * Customs module API
 * @package yii\easyii\modules\customs\api
 *
 * @method static CustomsObject get(array $params) Get customs object by id or slug
 * @method static array items(array $options = []) Get list of customs as CustomsObject objects
 * @method static mixed last(int $limit = 1) Get last customs
 * @method static void plugin() Applies FancyBox widget on photos called by box() function
 * @method static string pages() returns pagination html generated by yii\widgets\LinkPager widget.
 * @method static \stdClass pagination() returns yii\data\Pagination object.
 */

class Customs extends \yii\easyii\components\API
{
    private $_adp;
    private $_last;
    private $_items;
    private $_item = [];

    public function api_items($options = [])
    {
        if(!$this->_items){
            $this->_items = [];
            
            $query = CustomsModel::find()->where(['status' => CustomsModel::STATUS_ON]);

            if(!empty($options['where'])){
                $query->andFilterWhere($options['where']);
            }

            if(!empty($options['language'])){
                $query->localized($options['language']);
            }
            
            if(!empty($options['orderBy'])){
                $query->orderBy($options['orderBy']);
            } else {
                $query->orderBy('customs_id DESC');
            }

            if(!empty($options['limit'])) {
                $query->limit($options['limit']);
            }

            if(!empty($options['country'])) {
                $query->andWhere(['country' => $options['country']]);
            }

            $this->_adp = new ActiveDataProvider([
                'query' => $query,
                'pagination' => !empty($options['pagination']) ? $options['pagination'] : false
            ]);
        }
        return $this->_adp->models;
    }

    public function api_get($params)
    {
        if(!isset($this->_item[$params[0]])) {
            $this->_item[$params[0]] = $this->findCustoms($params);
        }
        return $this->_item[$params[0]];
    }

    public function api_last($limit = 1)
    {
        if($limit === 1 && $this->_last){
            return $this->_last;
        }

        $with = ['seo'];
        if(Yii::$app->getModule('admin')->activeModules['customs']->settings['enableTags']){
            $with[] = 'tags';
        }

        $result = [];
        foreach(CustomsModel::find()->with($with)->where(['status' => CustomsModel::STATUS_ON])->limit($limit)->all() as $item){
            $result[] = new CustomsObject($item);
        }

        if($limit > 1){
            return $result;
        } else {
            $this->_last = count($result) ? $result[0] : null;
            return $this->_last;
        }
    }

    public function api_plugin($options = [])
    {
        Fancybox::widget([
            'selector' => '.easyii-box',
            'options' => $options
        ]);
    }

    public function api_pagination()
    {
        return $this->_adp ? $this->_adp->pagination : null;
    }

    public function api_pages()
    {
        return $this->_adp ? LinkPager::widget(['pagination' => $this->_adp->pagination]) : '';
    }

    private function findCustoms($params)
    {
        $customs = CustomsModel::find()->where(['or', 'customs_id=:id_country', 'country=:id_country'], [':id_country' => $params[0]])->andWhere(['status' => CustomsModel::STATUS_ON]);

        if(isset($params[1])) {
            $customs->localized($params[1]);
        }

        $customs = $customs->one();

        if($customs) {
            return new CustomsObject($customs);
        } else {
            return null;
        }
    }
}